# -*- coding: utf-8 -*-
"""teste.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UxwHMFsYvOXvADaEGNcFBca5Q31ZFRUH
"""

# Conectando ao Google Drive (opcional, se quiser salvar os resultados)
from google.colab import drive
drive.mount('/content/drive')

# Instalando bibliotecas necessárias
!pip install tensorflow tensorflow_datasets matplotlib numpy

import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
import numpy as np

# Carregar o dataset
(raw_train, raw_validation, raw_test), metadata = tfds.load(
    'cats_vs_dogs',
    split=['train[:80%]', 'train[80%:90%]', 'train[90%:]'],
    with_info=True,
    as_supervised=True
)

# Função para normalizar e redimensionar as imagens
def format_example(image, label):
    image = tf.cast(image, tf.float32)
    image = image / 255.0
    image = tf.image.resize(image, (160, 160))
    return image, label

# Aplicar a função a todos os datasets
train = raw_train.map(format_example)
validation = raw_validation.map(format_example)
test = raw_test.map(format_example)

# Configurar para desempenho
BATCH_SIZE = 32
SHUFFLE_BUFFER_SIZE = 1000

train_batches = train.shuffle(SHUFFLE_BUFFER_SIZE).batch(BATCH_SIZE)
validation_batches = validation.batch(BATCH_SIZE)
test_batches = test.batch(BATCH_SIZE)

# Carregar o modelo pré-treinado
IMG_SHAPE = (160, 160, 3)
base_model = tf.keras.applications.MobileNetV2(
    input_shape=IMG_SHAPE,
    include_top=False,
    weights='imagenet'
)

# Congelar a base convolucional
base_model.trainable = False

# Adicionar cabeça de classificação
global_average_layer = tf.keras.layers.GlobalAveragePooling2D()
prediction_layer = tf.keras.layers.Dense(1)

# Juntar tudo
model = tf.keras.Sequential([
    base_model,
    global_average_layer,
    prediction_layer
])

# Compilar o modelo
base_learning_rate = 0.0001
model.compile(
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=base_learning_rate),
    loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
    metrics=['accuracy']
)

# Mostrar resumo do modelo
model.summary()

# Treinar o modelo
initial_epochs = 10
history = model.fit(
    train_batches,
    epochs=initial_epochs,
    validation_data=validation_batches
)

# Plotar resultados
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(8, 8))
plt.subplot(2, 1, 1)
plt.plot(acc, label='Training Accuracy')
plt.plot(val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.ylabel('Accuracy')
plt.ylim([min(plt.ylim()),1])
plt.title('Training and Validation Accuracy')

plt.subplot(2, 1, 2)
plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.ylabel('Cross Entropy')
plt.ylim([0,1.0])
plt.title('Training and Validation Loss')
plt.xlabel('epoch')
plt.show()

base_model.trainable = True
for layer in base_model.layers[:100]:
    layer.trainable = False

model.compile(
    optimizer=tf.keras.optimizers.RMSprop(learning_rate=base_learning_rate/10),
    loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
    metrics=['accuracy']
)

fine_tune_epochs = 10
total_epochs = initial_epochs + fine_tune_epochs

history_fine = model.fit(
    train_batches,
    epochs=total_epochs,
    initial_epoch=history.epoch[-1],
    validation_data=validation_batches
)

# Avaliar no conjunto de teste
loss, accuracy = model.evaluate(test_batches)
print('Test accuracy:', accuracy)

# Função para fazer previsões
def predict_image(image_path):
    img = tf.keras.preprocessing.image.load_img(image_path, target_size=(160, 160))
    img_array = tf.keras.preprocessing.image.img_to_array(img)
    img_array = tf.expand_dims(img_array, 0)  # Criar batch

    predictions = model.predict(img_array)
    score = tf.nn.sigmoid(predictions[0])

    if score < 0.5:
        print(f"Esta imagem parece ser de um gato com {100*(1-score.numpy()[0]):.2f}% de confiança.")
    else:
        print(f"Esta imagem parece ser de um cachorro com {100*score.numpy()[0]:.2f}% de confiança.")

    plt.imshow(img)
    plt.axis('off')
    plt.show()



# Chamar a função de predição
try:
    predict_image('/content/image_2025-05-09_144048440.png')
except Exception as e:
    print(f"Erro ao processar a imagem: {e}")
    print("Verifique se:")
    print("1. O caminho da imagem está correto")
    print("2. O arquivo existe no local especificado")
    print("3. O arquivo é uma imagem válida (JPEG, PNG, etc.)")

# Exemplo de uso (substitua pelo caminho da sua imagem)
# predict_image('/path/to/your/image.jpg')